version: "3.8"

services:
  postgres_db:
    env_file:
      - .env
    image: postgres:17
    container_name: merch_store_db
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "merch_store"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 2s
    volumes:
      - pg_data:/var/lib/postgresql/data
    profiles:
      - development

  default_migrate:
    env_file:
      - .env
    build:
      context: .
      dockerfile: migrations/Dockerfile
    container_name: merch_store_migrator
    depends_on:
      postgres_db:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./migrations:/migrations
    profiles:
      - development

  app:
    env_file:
      - .env
    build: .
    container_name: merch_store_server
    restart: always
    depends_on:
      - postgres_db
    ports:
      - "${HTTP_SERVER_PORT}:${HTTP_SERVER_PORT}"
    profiles:
      - development

  test_db:
    image: postgres:17
    container_name: test_db
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: store
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "store"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 2s
    ports:
      - "5433:5432"
    volumes:
      - pg_test_data:/var/lib/postgresql/data
    profiles:
      - test
      
  test_migrate:
    build:
      context: .
      dockerfile: test/integration/migrations/Dockerfile
    container_name: test_db_migrator
    environment:
      POSTGRES_HOST: test_db
      POSTGRES_USER: user
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: password
      POSTGRES_DB: store    
    depends_on:
      test_db:
        condition: service_healthy
    restart: on-failure
    profiles:
      - test

volumes:
  pg_data:
  pg_test_data: