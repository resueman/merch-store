// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/db/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	squirrel "github.com/Masterminds/squirrel"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	db "github.com/resueman/merch-store/pkg/db"
)

// MockRetryAdatapter is a mock of RetryAdatapter interface.
type MockRetryAdatapter struct {
	ctrl     *gomock.Controller
	recorder *MockRetryAdatapterMockRecorder
}

// MockRetryAdatapterMockRecorder is the mock recorder for MockRetryAdatapter.
type MockRetryAdatapterMockRecorder struct {
	mock *MockRetryAdatapter
}

// NewMockRetryAdatapter creates a new mock instance.
func NewMockRetryAdatapter(ctrl *gomock.Controller) *MockRetryAdatapter {
	mock := &MockRetryAdatapter{ctrl: ctrl}
	mock.recorder = &MockRetryAdatapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryAdatapter) EXPECT() *MockRetryAdatapterMockRecorder {
	return m.recorder
}

// WithRetry mocks base method.
func (m *MockRetryAdatapter) WithRetry(f func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRetry", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithRetry indicates an expected call of WithRetry.
func (mr *MockRetryAdatapterMockRecorder) WithRetry(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRetry", reflect.TypeOf((*MockRetryAdatapter)(nil).WithRetry), f)
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// ReadCommitted mocks base method.
func (m *MockTxManager) ReadCommitted(ctx context.Context, mode db.Mode, f func(context.Context) error) func() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCommitted", ctx, mode, f)
	ret0, _ := ret[0].(func() error)
	return ret0
}

// ReadCommitted indicates an expected call of ReadCommitted.
func (mr *MockTxManagerMockRecorder) ReadCommitted(ctx, mode, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCommitted", reflect.TypeOf((*MockTxManager)(nil).ReadCommitted), ctx, mode, f)
}

// RepeatableRead mocks base method.
func (m *MockTxManager) RepeatableRead(ctx context.Context, mode db.Mode, f func(context.Context) error) func() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepeatableRead", ctx, mode, f)
	ret0, _ := ret[0].(func() error)
	return ret0
}

// RepeatableRead indicates an expected call of RepeatableRead.
func (mr *MockTxManagerMockRecorder) RepeatableRead(ctx, mode, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepeatableRead", reflect.TypeOf((*MockTxManager)(nil).RepeatableRead), ctx, mode, f)
}

// Serializable mocks base method.
func (m *MockTxManager) Serializable(ctx context.Context, mode db.Mode, f func(context.Context) error) func() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serializable", ctx, mode, f)
	ret0, _ := ret[0].(func() error)
	return ret0
}

// Serializable indicates an expected call of Serializable.
func (mr *MockTxManagerMockRecorder) Serializable(ctx, mode, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serializable", reflect.TypeOf((*MockTxManager)(nil).Serializable), ctx, mode, f)
}

// WithRetry mocks base method.
func (m *MockTxManager) WithRetry(f func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRetry", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithRetry indicates an expected call of WithRetry.
func (mr *MockTxManagerMockRecorder) WithRetry(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRetry", reflect.TypeOf((*MockTxManager)(nil).WithRetry), f)
}

// MockPinger is a mock of Pinger interface.
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
}

// MockPingerMockRecorder is the mock recorder for MockPinger.
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance.
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPinger) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping), ctx)
}

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTransactor) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTransactorMockRecorder) BeginTx(ctx, txOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTransactor)(nil).BeginTx), ctx, txOptions)
}

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockQueryExecutor) Exec(ctx context.Context, q db.Query, args ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryExecutorMockRecorder) Exec(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryExecutor)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockQueryExecutor) Query(ctx context.Context, q db.Query, args ...interface{}) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryExecutorMockRecorder) Query(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryExecutor)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockQueryExecutor) QueryRow(ctx context.Context, q db.Query, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockQueryExecutorMockRecorder) QueryRow(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockQueryExecutor)(nil).QueryRow), varargs...)
}

// MockPooler is a mock of Pooler interface.
type MockPooler struct {
	ctrl     *gomock.Controller
	recorder *MockPoolerMockRecorder
}

// MockPoolerMockRecorder is the mock recorder for MockPooler.
type MockPoolerMockRecorder struct {
	mock *MockPooler
}

// NewMockPooler creates a new mock instance.
func NewMockPooler(ctrl *gomock.Controller) *MockPooler {
	mock := &MockPooler{ctrl: ctrl}
	mock.recorder = &MockPoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPooler) EXPECT() *MockPoolerMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockPooler) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockPoolerMockRecorder) BeginTx(ctx, txOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockPooler)(nil).BeginTx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockPooler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPoolerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPooler)(nil).Close))
}

// Exec mocks base method.
func (m *MockPooler) Exec(ctx context.Context, q db.Query, args ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPoolerMockRecorder) Exec(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPooler)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockPooler) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPoolerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPooler)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockPooler) Query(ctx context.Context, q db.Query, args ...interface{}) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPoolerMockRecorder) Query(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPooler)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPooler) QueryRow(ctx context.Context, q db.Query, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPoolerMockRecorder) QueryRow(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPooler)(nil).QueryRow), varargs...)
}

// MockQueryBuilder is a mock of QueryBuilder interface.
type MockQueryBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockQueryBuilderMockRecorder
}

// MockQueryBuilderMockRecorder is the mock recorder for MockQueryBuilder.
type MockQueryBuilderMockRecorder struct {
	mock *MockQueryBuilder
}

// NewMockQueryBuilder creates a new mock instance.
func NewMockQueryBuilder(ctrl *gomock.Controller) *MockQueryBuilder {
	mock := &MockQueryBuilder{ctrl: ctrl}
	mock.recorder = &MockQueryBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryBuilder) EXPECT() *MockQueryBuilderMockRecorder {
	return m.recorder
}

// QueryBuilder mocks base method.
func (m *MockQueryBuilder) QueryBuilder() squirrel.StatementBuilderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBuilder")
	ret0, _ := ret[0].(squirrel.StatementBuilderType)
	return ret0
}

// QueryBuilder indicates an expected call of QueryBuilder.
func (mr *MockQueryBuilderMockRecorder) QueryBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBuilder", reflect.TypeOf((*MockQueryBuilder)(nil).QueryBuilder))
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDB) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBMockRecorder) BeginTx(ctx, txOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Exec mocks base method.
func (m *MockDB) Exec(ctx context.Context, q db.Query, args ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBMockRecorder) Exec(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDB)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockDB) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDB)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockDB) Query(ctx context.Context, q db.Query, args ...interface{}) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBMockRecorder) Query(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDB)(nil).Query), varargs...)
}

// QueryBuilder mocks base method.
func (m *MockDB) QueryBuilder() squirrel.StatementBuilderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBuilder")
	ret0, _ := ret[0].(squirrel.StatementBuilderType)
	return ret0
}

// QueryBuilder indicates an expected call of QueryBuilder.
func (mr *MockDBMockRecorder) QueryBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBuilder", reflect.TypeOf((*MockDB)(nil).QueryBuilder))
}

// QueryRow mocks base method.
func (m *MockDB) QueryRow(ctx context.Context, q db.Query, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, q}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDBMockRecorder) QueryRow(ctx, q interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, q}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDB)(nil).QueryRow), varargs...)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Primary mocks base method.
func (m *MockClient) Primary() db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Primary")
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// Primary indicates an expected call of Primary.
func (mr *MockClientMockRecorder) Primary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Primary", reflect.TypeOf((*MockClient)(nil).Primary))
}

// Replica mocks base method.
func (m *MockClient) Replica() db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replica")
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// Replica indicates an expected call of Replica.
func (mr *MockClientMockRecorder) Replica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replica", reflect.TypeOf((*MockClient)(nil).Replica))
}
