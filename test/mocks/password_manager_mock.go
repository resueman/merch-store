// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/password/bryptManager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockPasswordManager) ComparePassword(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockPasswordManagerMockRecorder) ComparePassword(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockPasswordManager)(nil).ComparePassword), password, hash)
}

// HashPassword mocks base method.
func (m *MockPasswordManager) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordManagerMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordManager)(nil).HashPassword), password)
}
