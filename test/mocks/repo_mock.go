// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/resueman/merch-store/internal/entity"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, user *entity.CreateUserInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, user)
}

// GetUserByUsername mocks base method.
func (m *MockUser) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUser)(nil).GetUserByUsername), ctx, username)
}

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockAccount) Deposit(ctx context.Context, accountID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, accountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockAccountMockRecorder) Deposit(ctx, accountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockAccount)(nil).Deposit), ctx, accountID, amount)
}

// GetBalanceByAccountID mocks base method.
func (m *MockAccount) GetBalanceByAccountID(ctx context.Context, accountID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByAccountID", ctx, accountID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByAccountID indicates an expected call of GetBalanceByAccountID.
func (mr *MockAccountMockRecorder) GetBalanceByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByAccountID", reflect.TypeOf((*MockAccount)(nil).GetBalanceByAccountID), ctx, accountID)
}

// GetIDByUserID mocks base method.
func (m *MockAccount) GetIDByUserID(ctx context.Context, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUserID", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUserID indicates an expected call of GetIDByUserID.
func (mr *MockAccountMockRecorder) GetIDByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUserID", reflect.TypeOf((*MockAccount)(nil).GetIDByUserID), ctx, userID)
}

// GetIDByUsername mocks base method.
func (m *MockAccount) GetIDByUsername(ctx context.Context, username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUsername", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername.
func (mr *MockAccountMockRecorder) GetIDByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockAccount)(nil).GetIDByUsername), ctx, username)
}

// GetPurchasesByAccountID mocks base method.
func (m *MockAccount) GetPurchasesByAccountID(ctx context.Context, accountID int) ([]entity.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasesByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]entity.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasesByAccountID indicates an expected call of GetPurchasesByAccountID.
func (mr *MockAccountMockRecorder) GetPurchasesByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasesByAccountID", reflect.TypeOf((*MockAccount)(nil).GetPurchasesByAccountID), ctx, accountID)
}

// Withdraw mocks base method.
func (m *MockAccount) Withdraw(ctx context.Context, accountID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, accountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockAccountMockRecorder) Withdraw(ctx, accountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAccount)(nil).Withdraw), ctx, accountID, amount)
}

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// ExecPurchaseOperation mocks base method.
func (m *MockOperation) ExecPurchaseOperation(ctx context.Context, input entity.PurchaseOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecPurchaseOperation", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecPurchaseOperation indicates an expected call of ExecPurchaseOperation.
func (mr *MockOperationMockRecorder) ExecPurchaseOperation(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecPurchaseOperation", reflect.TypeOf((*MockOperation)(nil).ExecPurchaseOperation), ctx, input)
}

// ExecTransferOperation mocks base method.
func (m *MockOperation) ExecTransferOperation(ctx context.Context, input entity.TransferOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTransferOperation", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTransferOperation indicates an expected call of ExecTransferOperation.
func (mr *MockOperationMockRecorder) ExecTransferOperation(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTransferOperation", reflect.TypeOf((*MockOperation)(nil).ExecTransferOperation), ctx, input)
}

// GetIncomingTransfers mocks base method.
func (m *MockOperation) GetIncomingTransfers(ctx context.Context, accountID int) ([]entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomingTransfers", ctx, accountID)
	ret0, _ := ret[0].([]entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomingTransfers indicates an expected call of GetIncomingTransfers.
func (mr *MockOperationMockRecorder) GetIncomingTransfers(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomingTransfers", reflect.TypeOf((*MockOperation)(nil).GetIncomingTransfers), ctx, accountID)
}

// GetOutgoingTransfers mocks base method.
func (m *MockOperation) GetOutgoingTransfers(ctx context.Context, accountID int) ([]entity.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutgoingTransfers", ctx, accountID)
	ret0, _ := ret[0].([]entity.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutgoingTransfers indicates an expected call of GetOutgoingTransfers.
func (mr *MockOperationMockRecorder) GetOutgoingTransfers(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingTransfers", reflect.TypeOf((*MockOperation)(nil).GetOutgoingTransfers), ctx, accountID)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// GetProductByName mocks base method.
func (m *MockProduct) GetProductByName(ctx context.Context, name string) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByName", ctx, name)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByName indicates an expected call of GetProductByName.
func (mr *MockProductMockRecorder) GetProductByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByName", reflect.TypeOf((*MockProduct)(nil).GetProductByName), ctx, name)
}
